package kvraft

//finish the unreliable test for 3a,but need to fix the problem when facing
//leader crash

import (
	"log"
	"sync"
	"sync/atomic"

	"../labgob"
	"../labrpc"
	"../raft"
)

const Debug = 0

func DPrintf(format string, a ...interface{}) (n int, err error) {
	if Debug > 0 {
		log.Printf(format, a...)
	}
	return
}

type Op struct {
	// Your definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.

	Type  int //0:get 1:put 2:append -1:not such key
	Key   string
	Value string //if string=="",then op==get

}

type KVServer struct {
	mu      sync.Mutex
	me      int
	rf      *raft.Raft
	applyCh chan raft.ApplyMsg
	dead    int32 // set by Kill()

	maxraftstate int // snapshot if log grows this big

	// Your definitions here.

	applier    chan Op
	consumers  []chan Op
	consumers2 chan chan Op

	mp map[string]string //database

	clientNum map[uint64]int //每个client请求的最新值
}

func (kv *KVServer) Get(args *GetArgs, reply *GetReply) {
	// Your code here.

	// if kv.rf.tp!=2{

	// 	reply.Err="ErrWrongLeader"
	// 	return
	// }

	kv.mu.Lock()

	command := Op{0, args.Key, ""}

	// num, ok := kv.clientNum[args.clientId]

	// if ok && num >= args.Num {

	// 	reply.Err = "ErrWrongLeader"
	// 	log.Printf("kvserver %v:already submit the request:%v\n", kv.me, command)
	// 	kv.mu.Unlock()
	// 	return

	// }

	//index, term, isLeader := kv.rf.Start(command)
	//oldNum:=
	index, _, isLeader := kv.rf.Start(command)

	if !isLeader {

		reply.Err = "ErrWrongLeader"
		log.Printf("kvserver %v:get fail,not a leader,command:%v\n", kv.me, command)
		kv.mu.Unlock()
		return

	} else {

		//kv.clientNum[args.clientId] = args.Num

		ch := make(chan Op)
		//kv.consumers = append(kv.consumers, ch)

		kv.consumers2 <- ch
		log.Printf("kvserver %v:prepare get,rank:%v,index:%v,command %v\n", kv.me, len(kv.consumers)-1, index, command)

		kv.mu.Unlock()

		cm := <-ch

		if cm.Type == -1 {

			reply.Err = "ErrNoKey"
			//kv.mu.Unlock()
			return

		} else if cm.Type != command.Type || cm.Key != command.Key {

			reply.Err = "command fail"
			//kv.mu.Unlock()
			return

		}

		reply.Err = "OK"
		reply.Value = cm.Value

	}

}

func (kv *KVServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {
	// Your code here.
	var command Op
	if args.Op == "Put" {

		command = Op{1, args.Key, args.Value}

	} else {

		command = Op{2, args.Key, args.Value}

	}

	kv.mu.Lock()
	//index, term, isLeader := kv.rf.Start(command)

	num, ok := kv.clientNum[args.ClientId]

	if ok && num >= args.Num {

		reply.Err = "Already"
		log.Printf("kvserver %v:already submit the request:%v\n", kv.me, command)
		kv.mu.Unlock()
		return

	}

	index, _, isLeader := kv.rf.Start(command)

	if !isLeader {

		reply.Err = "ErrWrongLeader"
		log.Printf("kvserver %v:PutAppend fail,not a leader,command:%v\n", kv.me, command)
		kv.mu.Unlock()
		return

	} else {

		kv.clientNum[args.ClientId] = args.Num

		ch := make(chan Op)
		//kv.consumers = append(kv.consumers, ch)

		kv.consumers2 <- ch

		log.Printf("kvserver %v:prepare putAppend,rank:%v,index:%v,command %v\n", kv.me, len(kv.consumers)-1, index, command)
		kv.mu.Unlock()

		cm := <-ch

		if cm.Type != command.Type || cm.Key != command.Key || cm.Value != command.Value {

			reply.Err = "command fail"
			//kv.mu.Unlock()
			return

		}

		reply.Err = "OK"
		//reply.Value = cm.Value

	}
}

//
// the tester calls Kill() when a KVServer instance won't
// be needed again. for your convenience, we supply
// code to set rf.dead (without needing a lock),
// and a killed() method to test rf.dead in
// long-running loops. you can also add your own
// code to Kill(). you're not required to do anything
// about this, but it may be convenient (for example)
// to suppress debug output from a Kill()ed instance.
//
func (kv *KVServer) Kill() {
	atomic.StoreInt32(&kv.dead, 1)
	kv.rf.Kill()
	// Your code here, if desired.
}

func (kv *KVServer) killed() bool {
	z := atomic.LoadInt32(&kv.dead)
	return z == 1
}

//
// servers[] contains the ports of the set of
// servers that will cooperate via Raft to
// form the fault-tolerant key/value service.
// me is the index of the current server in servers[].
// the k/v server should store snapshots through the underlying Raft
// implementation, which should call persister.SaveStateAndSnapshot() to
// atomically save the Raft state along with the snapshot.
// the k/v server should snapshot when Raft's saved state exceeds maxraftstate bytes,
// in order to allow Raft to garbage-collect its log. if maxraftstate is -1,
// you don't need to snapshot.
// StartKVServer() must return quickly, so it should start goroutines
// for any long-running work.
//
func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *KVServer {
	// call labgob.Register on structures you want
	// Go's RPC library to marshall/unmarshall.
	labgob.Register(Op{})

	kv := new(KVServer)
	kv.me = me
	kv.maxraftstate = maxraftstate

	// You may need initialization code here.

	kv.mp = make(map[string]string)
	kv.consumers = make([]chan Op, 0)
	kv.consumers2 = make(chan chan Op, 100)

	kv.applyCh = make(chan raft.ApplyMsg)
	kv.rf = raft.Make(servers, me, persister, kv.applyCh)

	kv.clientNum = make(map[uint64]int)

	// You may need initialization code here.

	go func() {

		kv.Applier()

	}()

	return kv
}

func (kv *KVServer) Applier() {

	for {

		if kv.killed() {

			return
		}

		msg := <-kv.applyCh
		//var cm Op
		cm := msg.Command.(Op)

		log.Printf("kvserver %v:try to apply a command%v\n", kv.me, msg)

		if cm.Type == 0 {

			s, ok := kv.mp[cm.Key]
			if !ok {

				cm.Type = -1
				//ch <- cm

			} else {

				cm.Value = s
				//ch <- cm

			}

		} else if cm.Type == 1 {

			kv.mp[cm.Key] = cm.Value
			//ch <- cm

		} else if cm.Type == 2 {

			s, ok := kv.mp[cm.Key]

			if !ok {

				kv.mp[cm.Key] = cm.Value
			} else {

				kv.mp[cm.Key] = s + cm.Value

			}

			//ch <- cm

		}

		if len(kv.consumers2) > 0 {

			// kv.mu.Lock()
			// ch := kv.consumers[0]
			// kv.consumers = kv.consumers[1:]
			// kv.mu.Unlock()

			ch := <-kv.consumers2

			ch <- cm

		}

	}

}
